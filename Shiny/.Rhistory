View(b)
a <- as.data.frame(Reduce(rbind,Map(list,t(unlist(find_all)))))
a <- as.data.frame(Reduce(rbind,t(Map(list,t(unlist(find_all))))))
View(a)
Map(list,t(unlist(find_all)))
a = Map(list,t(unlist(find_all)))
View(find_all.df)
find_all <-  mongo.find.all(mongo, ns = "runway.dresses")
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
View(find_all.df)
library('dplyr')
df %>% separate(fit, c("fit_large", "fit_medium", "fit_small"))
df %>% dplyr::separate(fit, c("fit_large", "fit_medium", "fit_small"))
df %>% tidyr::separate(fit, c("fit_large", "fit_medium", "fit_small"))
library(tidyr)
install.packages("tidyr")
df %>% tidyr::separate(fit, c("fit_large", "fit_medium", "fit_small"))
library(tidyr)
df %>% tidyr::separate(fit, c("fit_large", "fit_medium", "fit_small"))
find_all.df %>% tidyr::separate(fit, c("fit_large", "fit_medium", "fit_small"))
find_all.df %>% dplyr::separate(fit, c("fit_large", "fit_medium", "fit_small"))
find_all.df %>% dplyr::separate(unlist(fit), c("fit_large", "fit_medium", "fit_small"))
find_all.df %>% tidyr::separate(unlist(fit), c("fit_large", "fit_medium", "fit_small"))
df <- data.frame(x = c("x: 123", "y: error: 7"))
df
df %>% separate(x, c("key", "value"), ": ", extra = "merge")
class(find_all.df$fit)
unlist(find_all.df$fit)
sapply(find_all.df$fit, unlist)
class(sapply(find_all.df$fit, unlist))
temp = class(sapply(find_all.df$fit, unlist))
temp = sapply(find_all.df$fit, unlist)
View(temp)
T(temp)
t(temp)
as.data.frame(t(temp))
as.data.frame(t(temp), row.names = 1:dim(t(temp))[1])
cbind(find_all.df, as.data.frame(t(temp), row.names = 1:dim(t(temp))[1]))
temp = cbind(find_all.df, as.data.frame(t(temp), row.names = 1:dim(t(temp))[1]))
View(temp)
temp = sapply(find_all.df$fit, unlist)
temp = cbind(find_all.df, as.data.frame(t(temp)))
temp = cbind.data.frame(find_all.df, as.data.frame(t(temp)))
temp = sapply(find_all.df$fit, unlist)
temp = cbind.data.frame(find_all.df, as.data.frame(t(temp)))
temp = sapply(find_all.df$fit, unlist)
find_all.df <- cbind.data.frame(find_all.df, t(temp))
View(find_all.df)
View(find_all.df)
find_all.df <- find_all.df%>%rename(fit_large=`1`)
find_all.df <- find_all.df%>%rename(fit_large='1')
find_all.df <- find_all.df%>%rename(fit_large=1)
names(find_all.df)
find_all.df <- find_all.df%>%rename(fit_large="1")
find_all.df <- rename(find_all.df,fit_large="1")
find_all.df <- rename(find_all.df,"1"=fit_large)
find_all.df <- rename(find_all.df,fit_large="1")
find_all.df <- rename(find_all.df,fit_large=fit)
View(find_all.df)
find_all.df <- rename(find_all.df,fit_large=1)
find_all.df %>% select(fit_large = 1)
str(find_all.df)
class(find_all.df)
summary(find_all.df)
View(find_all.df)
find_all.df %>% select(1)
find_all.df %>% select('1')
find_all.df %>% select(_id)
find_all.df %>% select(fit)
find_all.df <- cbind.data.frame(find_all.df, as.data.framet(temp))
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
temp <- sapply(find_all.df$fit, unlist)
find_all.df <- cbind.data.frame(find_all.df, as.data.frame(t(temp)))
find_all.df %>% select(fit_large = V1)
find_all.df %>% rename(fit_large = V1,true_to_size=V2,fit_small=V3)
find_all.df %>% rename(.,fit_large = V1,true_to_size=V2,fit_small=V3)
find_all.df %>% rename(.,fit_large = V1)
find_all.df <-  rename(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
select(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
rename(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
find_all.df$fit_large = V1
find_all.df$fit_large = find_all.df$V1
select(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
mutate(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
t <- mutate(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
View(t)
t <- transmute(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
t <- select(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
t <- rename(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
t <- dplyr::rename(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
temp <- sapply(find_all.df$fit, unlist)
find_all.df <- cbind.data.frame(find_all.df, as.data.frame(t(temp)))
find_all.df <- dplyr::rename(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
View(find_all.df)
class(find_all.df$numOfReviews)
unlist(find_all.df$numOfReviews)
x <- c(as = "asfef", qu = "qwerty", "yuiop[", "b", "stuff.blah.yech")
x
strsplit(x, "e")
unlist(strsplit(find_all.df$numOfReviews,"")
)
strsplit(find_all.df$numOfReviews,"")
strsplit(unlist(find_all.df$numOfReviews),"")
unlist(find_all.df$numOfReviews)
strsplit(unlist(find_all.df$numOfReviews)," ")
strsplit(unlist(find_all.df$numOfReviews)," ")[1]
unlist(strsplit(unlist(find_all.df$numOfReviews)," "))
as.vector(unlist(strsplit(unlist(find_all.df$numOfReviews)," ")))
nr <- as.vector(unlist(strsplit(unlist(find_all.df$numOfReviews)," ")))
nr[1]
temp = find_all.df
temp$numOfReviews
temp$numOfReviews[[1]]
Map(strsplit, temp$numOfReviews, ' ')
a = Map(strsplit, temp$numOfReviews, ' ')
a
lambda = function(x) {}
lambda = function(x) {}
lambda = function(x) { return(x[1])}
Map(lambda, a)
lambda(c('111','22'))
collapse(a)
nr <- as.vector(unlist(strsplit(unlist(find_all.df$numOfReviews)," ")))
nr <- as.vector(unlist(strsplit(unlist(find_all.df$numOfReviews)," ")))
nr <- as.vector(unlist(strsplit(unlist(find_all.df$numOfReviews)," ")))
nr
nr[-"reviews"]
nr[-reviews]
nr[2]
nr[1,3,5,7]
nr[c(1,3,5,7)]
nr.values
reviews %in% nr
'reviews' %in% nr
unique(nr)
n
nr
nr[filter('reviews'%in% nr)]
nr(filter('reviews'%in% nr))
filter('reviews'%in% nr)
nr['reviews'%in% nr]
'reviews' %in% nr
lamb = function(x) {return x != 'reviews'}
lamb = function(x) {return x != 'reviews'}
lamb = function(x) {if x != 'reviews'{return x}}
lamb = function(x) {
if(x != 'reviews')
find_all.df$numOfReviews
a = Map(strsplit, find_all.df$numOfReviews, ' ')
a
a[1]
a[[1]]
a[[1]][1]
a[[1]][1][1]
a[[1]]
a[[1, ]]
a[[1], 1]
a[[[1]]]
a[[1]][2]
a[[1]][1]
a[[1]][[1]]
a[[1]][[1]][1]
a[[:]][[:]][1]
a[[,]][[,]][1]
length(a)
a[[1:12]][[1:12]][1]
a[[1:12]][[1]][1]
a[[1]][[1]][1]
a[[1]][[1:12]][1]
a[[1]][[1]][1:12]
a[1:12][[1]][1]
a[[1:12]][[1]][1]
a
a[[1:12]][[1]][[1]]
a[[1]][[1]][[1]]
a[[1]][[1]][[1]][1]
a[[1]][[1:12]][[1]][1]
a[[1]][[1]][[1,1]]
a[[1]][[1]][1,1]
a[[1]][1,1]
sapply(a, `[[`, 1)
sapply(a, `[[`, 1)[1,]
sapply(a, `[[`, 1)[1,][1]
sapply(a, `[[`, 1)[1,]
a = Map(strsplit, find_all.df$numOfReviews, ' ')
sapply(a, '[[', 1)[1,]
find_all.df$numOfReviews = sapply(a, '[[', 1)[1,]
class(find_all.df$designer)
tbl_df(find_all.df)
as.factor(find_all.df$designer)
as.factor(unlist(find_all.df$designer))
class(find_all.df$designer)
test <- find_all.df
test$designer <- as.factor(unlist(find_all.df$designer))
View(test)
View(test)
View(test)
class(find_all.df$designer)
class(test$designer)
as.factor
unlist
apply(text,2,unlist)
dim(test)
apply(test,2,unlist)
apply(test,2,as.factor)
View(test)
test <- apply(test,2,unlist)
apply(test,2,as.factor)
dim(test)
tbl_df(find_all.df)
test <- find_all.df %>% select(item=as.character(unlist(find_all.df$name)),
brand=as.factor(unlist(find_all.df$designer)),
retailPrice=as.numeric(unlist(find_all.df$retailPrice)),
rentalPrice=as.numeric(unlist(find_all.df$rentalPrice)),
num_Reviews=as.numeric(find_all.df$numOfReviews),
avgRating=as.numeric(unlist(find_all.df$avgRating)),
fit_large=as.integer(find_all.df$fit_large),
true_to_size=as.integer(find_all.df$true_to_size),
fit_small=as.integer(find_all.df$fit_small),
image_url=img
)
find_all.df %>% select(item=as.character(unlist(find_all.df$name))
)
brand=as.factor(unlist(find_all.df$designer))
brand
item=as.character(unlist(find_all.df$name))
item
class(item)
class(brand)
select(find_all.df,item=as.character(unlist(find_all.df$name)))
data <- cbind.data.frame(item,brand)
View(data)
View(data)
item=as.character(unlist(find_all.df$name)),
brand=as.factor(unlist(find_all.df$designer)),
retailPrice=as.numeric(unlist(find_all.df$retailPrice)),
rentalPrice=as.numeric(unlist(find_all.df$rentalPrice)),
num_Reviews=as.numeric(find_all.df$numOfReviews),
avgRating=as.numeric(unlist(find_all.df$avgRating)),
fit_large=as.integer(find_all.df$fit_large),
true_to_size=as.integer(find_all.df$true_to_size),
fit_small=as.integer(find_all.df$fit_small),
image_url=find_all.df$img
item=as.character(unlist(find_all.df$name))
brand=as.factor(unlist(find_all.df$designer))
retailPrice=as.numeric(unlist(find_all.df$retailPrice))
rentalPrice=as.numeric(unlist(find_all.df$rentalPrice))
num_Reviews=as.numeric(find_all.df$numOfReviews)
avgRating=as.numeric(unlist(find_all.df$avgRating))
fit_large=as.integer(find_all.df$fit_large)
true_to_size=as.integer(find_all.df$true_to_size)
fit_small=as.integer(find_all.df$fit_small)
image_url=find_all.df$img
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small,image_url)
View(data)
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating)
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small)
class(image_url)
image_url=as.character(unlist(find_all.df$img))
clas(image_url)
class(image_url)
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small,image_url)
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small,image_url,check.names = F)
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small,image_url,check.names = T)
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small)
image_url=(find_all.df$img[1])
image_url=sapply(find_all.df$img, unlist)
find_all.df <- cbind.data.frame(find_all.df, as.data.frame(t(temp)),as.data.frame(t(image_url)))
View(find_all.df)
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
temp <- sapply(find_all.df$fit, unlist)
image_url=sapply(find_all.df$img, unlist)
find_all.df <- cbind.data.frame(find_all.df, as.data.frame(t(temp)),as.data.frame(t(image_url)))
image_url
t(image_url)
find_all <-  mongo.find.all(mongo, ns = "runway.dresses")
#tmp.df <-  as.data.frame(t(unlist(tmp)), stringsAsFactors = F)
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
temp <- sapply(find_all.df$fit, unlist)
find_all.df <- cbind.data.frame(find_all.df, as.data.frame(t(temp)))
find_all.df <- dplyr::rename(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
nr <- as.vector(unlist(strsplit(unlist(find_all.df$numOfReviews)," ")))
# remove the string "reviews' in numOfReviews
a = Map(strsplit, find_all.df$numOfReviews, ' ')
find_all.df$numOfReviews = sapply(a, '[[', 1)[1,]
View(find_all.df)
find_all.df$name=as.character(unlist(find_all.df$name))
find_all.df$designer=as.factor(unlist(find_all.df$designer))
find_all.df$retailPrice=as.numeric(unlist(find_all.df$retailPrice))
find_all.df$rentalPrice=as.numeric(unlist(find_all.df$rentalPrice))
find_all.df$numOfReviews=as.numeric(find_all.df$numOfReviews)
find_all.df$avgRating=as.numeric(unlist(find_all.df$avgRating))
find_all.df$fit_large=as.integer(find_all.df$fit_large)
find_all.df$true_to_size=as.integer(find_all.df$true_to_size)
find_all.df$fit_small=as.integer(find_all.df$fit_small)
tbl(find_all.df)
tbl_df(find_all.df)
str(find_all.df)
str(data)
find_all <-  mongo.find.all(mongo, ns = "runway.dresses")
#tmp.df <-  as.data.frame(t(unlist(tmp)), stringsAsFactors = F)
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
temp <- sapply(find_all.df$fit, unlist)
find_all.df <- cbind.data.frame(find_all.df, as.data.frame(t(temp)))
find_all.df <- dplyr::rename(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
nr <- as.vector(unlist(strsplit(unlist(find_all.df$numOfReviews)," ")))
# remove the string "reviews' in numOfReviews
a = Map(strsplit, find_all.df$numOfReviews, ' ')
find_all.df$numOfReviews = sapply(a, '[[', 1)[1,]
View(find_all.df)
item=as.character(unlist(find_all.df$name))
brand=as.factor(unlist(find_all.df$designer))
retailPrice=as.numeric(unlist(find_all.df$retailPrice))
rentalPrice=as.numeric(unlist(find_all.df$rentalPrice))
num_Reviews=as.numeric(find_all.df$numOfReviews)
avgRating=as.numeric(unlist(find_all.df$avgRating))
fit_large=as.integer(find_all.df$fit_large)
true_to_size=as.integer(find_all.df$true_to_size)
fit_small=as.integer(find_all.df$fit_small)
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small)
str(data)
data <- as.character(data$item)
str(data)
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small)
data$item<- as.character(data$item)
str(data)
temp
t(temp)
img_url <- sapply(find_all.df$img, unlist)
img_url
class(img_url)
class(temp)
img_url <- sapply(img_url, unlist)
class(img_url)
i <- sapply(find_all.df$img, unlist)
i
class(find_all.df$fit)
temp
class(temp)
i <- sapply(find_all.df$img, unlist)
i
class(i)
find_all.df$fit
find_all.df$img
find_all.df$fit
i <- sapply(t(find_all.df$img), unlist)
i
i[1]
i[[1]]
i[[1]][1]
unlist(i[[1]])
unlist(i[[1]][1])
unlist(i)
unlist(i[1])
i[[1]][1]
i[[2]][1]
View(data)
View(find_all.df)
View(data)
mongo <- mongo.create()
mongo.is.connected(mongo)
mongo.get.databases(mongo)
mongo.get.database.collections(mongo, db = "runway")
mongo.count(mongo, "runway.dresses")
find_all <-  mongo.find.all(mongo, ns = "runway.dresses")
#tmp.df <-  as.data.frame(t(unlist(tmp)), stringsAsFactors = F)
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
temp <- sapply(find_all.df$fit, unlist)
find_all.df <- cbind.data.frame(find_all.df, as.data.frame(t(temp)))
find_all.df <- dplyr::rename(find_all.df,fit_large = V1,true_to_size=V2,fit_small=V3)
nr <- as.vector(unlist(strsplit(unlist(find_all.df$numOfReviews)," ")))
# remove the string "reviews' in numOfReviews
a = Map(strsplit, find_all.df$numOfReviews, ' ')
find_all.df$numOfReviews = sapply(a, '[[', 1)[1,]
# transfer the data type
item=as.character(unlist(find_all.df$name))
brand=as.factor(unlist(find_all.df$designer))
retailPrice=as.numeric(unlist(find_all.df$retailPrice))
rentalPrice=as.numeric(unlist(find_all.df$rentalPrice))
num_Reviews=as.numeric(find_all.df$numOfReviews)
avgRating=as.numeric(unlist(find_all.df$avgRating))
fit_large=as.integer(find_all.df$fit_large)
true_to_size=as.integer(find_all.df$true_to_size)
fit_small=as.integer(find_all.df$fit_small)
# extract the data for analysis
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small)
fit_large,true_to_size,fit_small)
data <- cbind.data.frame(item,brand,retailPrice,rentalPrice,num_Reviews,avgRating,
fit_large,true_to_size,fit_small)
View(find_all.df)
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
View(find_all.df)
temp <- sapply(find_all.df$fit, unlist)
temp
find_all.df <- cbind.data.frame(find_all.df, as.data.frame(t(temp)))
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
temp <- sapply(find_all.df$fit, unlist)
t(temp)
temp
dim(temp)
class(temp)
unlist(temp)
find_all.df <- as.data.frame(Reduce(rbind,t(find_all)))
class(find_all.df$fit)
f <- find_all.df$fit
f
sapply(f,unlist)
library(forecast)
library(tseries)
install.packages('forecast')
install.packages('tseries')
library(forecast)
library(tseries)
plot(Nile, main = "Annual Flow of the Nile River")
ndiffs(Nile) #Estimates the number of differences required to make a given
dNile = diff(Nile, differences = 1) #Returns lagged and iterated differences;
ndiffs(Nile) #Estimates the number of differences required to make a given
plot(dNile, main = "Annual Flow of the Nile River\n1 Difference")
adf.test(dNile)
par(mfrow=c(2, 1))
Acf(dNile)
Pacf(dNile)
par(mfrow=c(1,1))
initial.fit = Arima(Nile, order = c(2, 1, 1))
initial.fit
summary(initial.fit)
(1 - pnorm(abs(initial.fit$coef)/sqrt(diag(initial.fit$var.coef))))*2
new.fit = Arima(Nile, order = c(1, 1, 1))
new.fit
(1 - pnorm(abs(new.fit$coef)/sqrt(diag(new.fit$var.coef))))*2
AIC(initial.fit, new.fit)
BIC(initial.fit, new.fit)
Box.test(new.fit$residuals, type = "Ljung-Box")
#We can forecast new values by using the forecast() function:
Pacf(new.fit$residuals) #No significant partial autocorrelations.
#The Ljung-Box test returns an insignificant p-value, further suggesting that
#the autocorrelations do not differ from 0; this helps us determine that the
#independent errors assumption is not violated.
Box.test(new.fit$residuals, type = "Ljung-Box")
#We can forecast new values by using the forecast() function:
future.values = forecast(new.fit, 3, level = c(60, 80, 95))
future.values = forecast(new.fit, 3, level = c(60, 80, 95))
#We're given both point estimates and confidence bands represented by the levels
#we specify; this function is nice because it automatically transforms the data
#back onto the original scale!
future.values
plot(future.values)
future.values = forecast(new.fit, 30, level = c(60, 80, 95))
future.values
plot(future.values)
require(dplyr)
library(ggplot2)
library(ggvis)
install ggvis
install.packages("ggvis")
library(plotly)
library(RColorBrewer)
# This is the user-interface definition of a Shiny web application.
require(shinyBS)
library(shinyjs)
install.packages(shinyjs)
install.packages("shinyjs")
require(shinyBS)
library(shinyjs)
shiny::runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
install.packages('leaflet')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
install.packages("shinythemes")
library(shinythemes)
library(leaflet)
install.packages("rgeos")
library(rgeos)
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
install.packages("rgdal")
library(rgdal)
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
library(data.table)
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
require(shinyBS)
install.packages("shinyBS")
require(shinyBS)
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
runApp('~/Documents/FIVEprojects/big4_project/Big4/Shiny')
setwd("/Users/crystal/Documents/FIVEprojects/big4_project/Big4/Shiny")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
